{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","color","setColor","frase","setFrase","autor","setAutor","idFrase","setIdFrase","fraseUser","setFraseUser","autorUser","setAutorUser","add","setAdd","id","setId","uniqid","lista","setLista","handleNext","aleatorio","Math","floor","random","length","clrAleatorio","hexadecimal","i","modoEdit","setModoEdit","useEffect","setTimeout","className","style","backgroundColor","width","href","target","onClick","filter","e","onSubmit","preventDefault","for","class","type","placeholder","value","onChange","newArray","map","console","log","newFrase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9a015df.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport uniqid from 'uniqid';\r\n\r\nfunction App() {\r\n  //Estado que maneja el color de fondo de la app.\r\n  const [color, setColor] = useState('');\r\n\r\n   // Estados que contienen la frase y el autor que se mostrará en pantalla.\r\n   const [frase, setFrase] = useState('');\r\n   const [autor, setAutor] = useState('');\r\n   const [idFrase, setIdFrase] = useState('');\r\n\r\n   //Estados que contienen frases de usuarios\r\n   const [fraseUser, setFraseUser] = useState('');\r\n   const [autorUser, setAutorUser] = useState('');\r\n\r\n    //Estado para habilitar el formulario que añade la frase y autor del usuarios.\r\n    const [ add, setAdd ] = useState(false);\r\n\r\n  // ID que permitirá que la frase en pantalla no se repita al presionar siguiente.\r\n  const [id, setId] = useState('');\r\n\r\n //Lista es una constante que contiene un objeto con las frases a usar.\r\n const [lista, setLista] = useState([\r\n    {\r\n      frase: 'A lo hecho, pecho',\r\n      autor: 'Homer j. Simpsons',\r\n      id: uniqid()\r\n    },\r\n    {\r\n      frase: 'Do what you can, where you are, with what you have.',\r\n      autor: 'Teddy Roosevelt',\r\n      id: uniqid()\r\n    },\r\n    {\r\n      frase: 'When I let go of what I am, I become what I might be.',\r\n      autor: 'Lao Tzu',\r\n      id: uniqid()\r\n    },\r\n    {\r\n      frase: 'Lisa necesita frenos',\r\n      autor: 'Marge',\r\n      id: uniqid()\r\n    },\r\n    {\r\n      frase: 'A la grande le puse cuca',\r\n      autor: 'Homero',\r\n      id: uniqid()\r\n    },\r\n    {\r\n      frase: 'Either you run the day, or the day runs you.',\r\n      autor: 'Jim Rohn',\r\n      id: uniqid()\r\n    },\r\n  ]);\r\n\r\n//Función que permite mostrar las frases en pantalla de manera aleatoria.\r\n  const handleNext = () => {\r\n    //aleatorio es un variable que guarda un numero entre 0 y 5.\r\n    var aleatorio = Math.floor((Math.random() * ((lista.length - 1) - 0 + 1)) + 0);\r\n      \r\n    //Condición que impide que la frase se repita por medio de la id. Si se repite, ejecuta de nuevo la función. \r\n      if(id !== aleatorio){\r\n        //Set que establecen el id, la frase y el autor a los estados.\r\n        setId(aleatorio);\r\n        setFrase(lista[aleatorio].frase);\r\n        setAutor(lista[aleatorio].autor);\r\n        setIdFrase(lista[aleatorio].id)\r\n      }else{\r\n        handleNext()\r\n      }\r\n    //código para crear un color aleatorio para el background. El mismo cambiará cuando se ejecute handleNext.\r\n    var clrAleatorio = '#';\r\n    var hexadecimal = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\r\n   for(let i=0; i<6; i++){\r\n    var numero = Math.floor((Math.random() * (16 - 0)));\r\n    var codigoHexa =  hexadecimal[numero];\r\n    clrAleatorio += codigoHexa;\r\n   }\r\n   setColor(clrAleatorio)\r\n  }\r\n\r\n  \r\n//funnción que habilita el formulario para agregar frase\r\n  const handleAdd = () => {\r\n    setAdd(true);\r\n    setModoEdit(false)\r\n  }\r\n//función que envía la frase y autor escrita el formulario.\r\n  const handleAñadir = () => {\r\n    const newFrase = {frase:fraseUser, autor:autorUser, id:uniqid()};\r\n    setLista([...lista, newFrase]);\r\n    setFrase(fraseUser);\r\n    setAutor(autorUser);\r\n    setFraseUser('');\r\n    setAutorUser('');\r\n    setAdd(false)\r\n    setIdFrase(newFrase.id)\r\n  }\r\n\r\n//Estado que permite cambiar el boton de añadir frase a editar frase y viceversa.\r\nconst [modoEdit, setModoEdit] = useState(false)\r\n//función que habilita el formulario y envía la frase a editar a los input.\r\n  const handleEdit = () => {\r\n    setModoEdit(true)\r\n    setAdd(!add);\r\n    lista.filter(e => {\r\n      if(idFrase === e.id){\r\n        setFraseUser(e.frase);\r\n        setAutorUser(e.autor);\r\n      }\r\n    })\r\n  }\r\n//Función que envía la frase editada y oculta el formulario.\r\n  const handleEditar = () => {\r\n    setModoEdit(false);\r\n    const newArray = lista.map(value => value.id === idFrase ? {frase:fraseUser, autor:autorUser, id:uniqid()} : value)\r\n    setLista(newArray);\r\n    setFrase(fraseUser);\r\n    setAutor(autorUser);\r\n    setFraseUser('');\r\n    setAutorUser('');\r\n    setAdd(!add)\r\n    console.log(newArray)\r\n  }\r\n\r\n//UseEffet y setTimeout para que cuando cargue se ejecute handleNext y muestre un frase.\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      handleNext()\r\n    }, 2000)\r\n    \r\n  }, [])\r\n\r\n  return (\r\n    <div \r\n      id='quote-box'\r\n      className=\"d-flex flex-column h-100 \r\n      justify-content-center\"\r\n      style={{backgroundColor:color}} \r\n    >\r\n\r\n      <div className=\" bg-dark mx-auto rounded border-white\" style={{width:\"80%\"}}>\r\n        <section className=\"text-white rounded my-3 mx-3\">\r\n        {/*Estados usados para mostrar la frase y autor*/}\r\n          <p id=\"text\" className=\"text-center font-italic font-weight-bold\">{frase}</p>\r\n          <p id=\"author\" className=\"text-right\">{autor}</p>\r\n        </section>\r\n      </div>\r\n\r\n      <div className=\"bg-dark mx-auto d-flex rounded\" style={{width:\"80%\"}}>\r\n      <a href={`https://twitter.com/intent/tweet/?hashtags=quotes&text=\"${frase}\" ${autor}`} id=\"tweet-quote\" target=\"_blank\" style={{backgroundColor:\"#00dccd\"}} className=\"btn btn-success justify-self-start ml-3\">Twittear</a>\r\n        <button className=\"btn btn-success ml-auto\" onClick={handleEdit}>Editar frase</button>\r\n        <button className=\"btn btn-secondary mx-3\" onClick={handleAdd}>Añadir frase</button>\r\n        <button id=\"new-quote\" className=\"btn btn-primary mr-3\" onClick={handleNext}>Siguiente</button>\r\n      </div>\r\n      \r\n      {/*Operación ternaria que habilita y deshabilita el formulario para agregar frases.*/}\r\n      {\r\n        add ?\r\n          <form onSubmit={(e)=>{e.preventDefault()}} className=\"form-group text-center mt-3\">\r\n            <label for='frase'>\r\n              <input \r\n                class=\"form-control\"\r\n                type='text' \r\n                placeholder='Escribe una frase'\r\n                value={fraseUser}\r\n                onChange={(e) => {setFraseUser(e.target.value)}}\r\n              ></input>\r\n            </label>\r\n            <label for='autor'>\r\n              <input \r\n                class=\"form-control\"\r\n                type='text' \r\n                placeholder='Escribe un autor/a'\r\n                value={autorUser}\r\n                onChange={(e) => {setAutorUser(e.target.value)}}\r\n              ></input>\r\n            </label>\r\n            {/*Operación ternaria que cambia el boton de 'añadir frase' a 'editar frase'*/}\r\n            { modoEdit ?\r\n              <button className=\"btn btn-success\" onClick={handleEditar}>Editar frase</button> \r\n              :\r\n              <button className=\"btn btn-success\" onClick={handleAñadir}>Añadir frase</button>\r\n            }              \r\n          </form>\r\n        :\r\n          <span></span>\r\n        \r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n \r\n  \r\n  \r\n  \r\n    \r\n    \r\n     \r\n     \r\n        \r\n        \r\n          \r\n         ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}